import React, { useState } from 'react';

const ShoppingCart = () => {
  const [cartItems, setCartItems] = useState([
    { 
      id: 1, 
      name: 'Premium Headphones', 
      price: 129.99, 
      quantity: 1,
      image: '/api/placeholder/80/80'
    },
    { 
      id: 2, 
      name: 'Wireless Keyboard', 
      price: 79.99, 
      quantity: 2,
      image: '/api/placeholder/80/80'
    },
    { 
      id: 3, 
      name: 'Smart Watch', 
      price: 199.99, 
      quantity: 1,
      image: '/api/placeholder/80/80'
    }
  ]);

  const handleQuantityChange = (id, newQuantity) => {
    if (newQuantity >= 1) {
      setCartItems(cartItems.map(item => 
        item.id === id ? { ...item, quantity: newQuantity } : item
      ));
    }
  };

  const handleRemoveItem = (id) => {
    setCartItems(cartItems.filter(item => item.id !== id));
  };

  const calculateItemTotal = (price, quantity) => {
    return (price * quantity).toFixed(2);
  };

  const calculateCartTotal = () => {
    return cartItems.reduce((total, item) => 
      total + (item.price * item.quantity), 0
    ).toFixed(2);
  };

  const handleBuyNow = () => {
    // In a real application, this would use a router to navigate
    alert('Navigating to checkout page...');
    console.log('Proceeding to checkout with items:', cartItems);
  };

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 py-6 px-8">
        <h2 className="text-2xl font-bold text-white">Your Shopping Cart</h2>
      </div>
      
      {cartItems.length === 0 ? (
        <div className="flex flex-col items-center justify-center py-16 px-8">
          <div className="text-gray-400 text-6xl mb-4">ðŸ›’</div>
          <p className="text-xl text-gray-500 font-medium">Your cart is empty</p>
          <button className="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition-colors">
            Continue Shopping
          </button>
        </div>
      ) : (
        <div className="p-8">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left pb-4 font-semibold text-gray-600">Product</th>
                  <th className="text-center pb-4 font-semibold text-gray-600">Quantity</th>
                  <th className="text-right pb-4 font-semibold text-gray-600">Price</th>
                  <th className="text-right pb-4 font-semibold text-gray-600">Total</th>
                  <th className="pb-4"></th>
                </tr>
              </thead>
              <tbody>
                {cartItems.map((item) => (
                  <tr key={item.id} className="border-b border-gray-100">
                    <td className="py-6 pr-4">
                      <div className="flex items-center">
                        <div className="h-20 w-20 flex-shrink-0 overflow-hidden rounded-md border border-gray-200 mr-4">
                          <img
                            src={item.image}
                            alt={item.name}
                            className="h-full w-full object-cover object-center"
                          />
                        </div>
                        <div>
                          <h3 className="text-lg font-medium text-gray-800">{item.name}</h3>
                          <p className="mt-1 text-sm text-gray-500">ID: {item.id}</p>
                        </div>
                      </div>
                    </td>
                    <td className="py-6">
                      <div className="flex items-center justify-center">
                        <button 
                          className="bg-gray-100 hover:bg-gray-200 text-gray-700 w-8 h-8 rounded-l-md flex items-center justify-center transition-colors"
                          onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                        >
                          -
                        </button>
                        <span className="w-10 h-8 flex items-center justify-center border-t border-b border-gray-200 bg-white text-gray-700">
                          {item.quantity}
                        </span>
                        <button 
                          className="bg-gray-100 hover:bg-gray-200 text-gray-700 w-8 h-8 rounded-r-md flex items-center justify-center transition-colors"
                          onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                        >
                          +
                        </button>
                      </div>
                    </td>
                    <td className="py-6 text-right text-gray-700 font-medium">
                      ${item.price.toFixed(2)}
                    </td>
                    <td className="py-6 text-right text-gray-900 font-bold">
                      ${calculateItemTotal(item.price, item.quantity)}
                    </td>
                    <td className="py-6 pl-4 text-right">
                      <button 
                        className="text-gray-400 hover:text-red-500 transition-colors"
                        onClick={() => handleRemoveItem(item.id)}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          <div className="mt-10 border-t border-gray-200 pt-6">
            <div className="flex justify-between items-center mb-4">
              <span className="text-base text-gray-600">Subtotal</span>
              <span className="text-lg font-medium text-gray-900">${calculateCartTotal()}</span>
            </div>
            <div className="flex justify-between items-center mb-4">
              <span className="text-base text-gray-600">Shipping</span>
              <span className="text-lg font-medium text-gray-900">Free</span>
            </div>
            <div className="flex justify-between items-center border-t border-gray-200 pt-4">
              <span className="text-lg font-semibold text-gray-900">Total</span>
              <span className="text-xl font-bold text-gray-900">${calculateCartTotal()}</span>
            </div>
          </div>
          
          <div className="mt-8 text-right">
            <button 
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-md shadow-md transition-all hover:shadow-lg"
              onClick={handleBuyNow}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ShoppingCart;


===============================================================================================================================
================================


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <style>
        /* Reset default browser styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        /* Page background */
        body {
            background-color: #f5f5f5;
            padding: 20px;
        }
        
        /* Main cart container */
        .cart-container {
            max-width: 1000px;
            margin: 0 auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        /* Cart header with gradient background */
        .cart-header {
            background: linear-gradient(to right, #4a6cf7, #2c3e93);
            color: white;
            padding: 20px 30px;
        }
        
        .cart-header h2 {
            font-size: 1.8rem;
            font-weight: 600;
        }
        
        /* Content area padding */
        .cart-content {
            padding: 30px;
        }
        
        /* Empty cart message styling */
        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            display: none; /* Hidden by default, shown via JS */
        }
        
        .empty-cart-icon {
            font-size: 3rem;
            color: #ccc;
            margin-bottom: 15px;
        }
        
        .empty-cart p {
            font-size: 1.2rem;
            color: #777;
            margin-bottom: 20px;
        }
        
        /* Continue shopping button */
        .continue-shopping {
            background-color: #4a6cf7;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .continue-shopping:hover {
            background-color: #2c3e93;
        }
        
        /* Cart table styling */
        .cart-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        /* Table header styling */
        .cart-table th {
            text-align: left;
            padding: 15px 10px;
            border-bottom: 1px solid #e1e1e1;
            font-weight: 600;
            color: #555;
        }
        
        /* Center align the quantity column header */
        .cart-table th:nth-child(2) {
            text-align: center;
        }
        
        /* Right align price and total column headers */
        .cart-table th:nth-child(3),
        .cart-table th:nth-child(4) {
            text-align: right;
        }
        
        /* Table cell styling */
        .cart-table td {
            padding: 20px 10px;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: middle;
        }
        
        /* Product info container */
        .product-info {
            display: flex;
            align-items: center;
        }
        
        /* Product image styling */
        .product-image {
            width: 80px;
            height: 80px;
            border-radius: 6px;
            border: 1px solid #eee;
            margin-right: 15px;
            object-fit: cover;
        }
        
        /* Product name styling */
        .product-details h3 {
            font-weight: 500;
            color: #333;
            margin-bottom: 5px;
        }
        
        /* Product ID styling */
        .product-id {
            font-size: 0.85rem;
            color: #888;
        }
        
        /* Quantity control container */
        .quantity-controls {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* Quantity buttons (plus/minus) */
        .quantity-btn {
            width: 32px;
            height: 32px;
            background-color: #f0f0f0;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.2s;
        }
        
        .quantity-btn:hover {
            background-color: #e0e0e0;
        }
        
        /* Round the left corners of the minus button */
        .quantity-btn.minus {
            border-radius: 4px 0 0 4px;
        }
        
        /* Round the right corners of the plus button */
        .quantity-btn.plus {
            border-radius: 0 4px 4px 0;
        }
        
        /* Quantity display value */
        .quantity-value {
            width: 40px;
            height: 32px;
            border-top: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
            border-left: none;
            border-right: none;
            text-align: center;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: white;
        }
        
        /* Price and total value styling */
        .item-price, .item-total {
            text-align: right;
            font-weight: 500;
        }
        
        .item-price {
            color: #555;
        }
        
        .item-total {
            color: #333;
        }
        
        /* Remove button (trash icon) */
        .remove-btn {
            background: none;
            border: none;
            color: #aaa;
            cursor: pointer;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        
        .remove-btn:hover {
            color: #f44336; /* Red on hover */
        }
        
        /* Cart summary section */
        .cart-summary {
            margin-top: 30px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }
        
        /* Summary row layout */
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
        }
        
        /* Summary label styling */
        .summary-label {
            color: #666;
        }
        
        /* Summary value styling */
        .summary-value {
            font-weight: 500;
            color: #333;
        }
        
        /* Total row with separator */
        .summary-total {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        
        /* Total label styling */
        .total-label {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
        }
        
        /* Total value styling */
        .total-value {
            font-size: 1.25rem;
            font-weight: 700;
            color: #2c3e93;
        }
        
        /* Checkout button container */
        .checkout-btn-container {
            margin-top: 30px;
            text-align: right;
        }
        
        /* Checkout button styling */
        .checkout-btn {
            background-color: #4a6cf7;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 6px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
        }
        
        .checkout-btn:hover {
            background-color: #2c3e93;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }
        
        /* Responsive styles for mobile devices */
        @media (max-width: 768px) {
            .cart-container {
                border-radius: 0;
                box-shadow: none;
            }
            
            .cart-content {
                padding: 15px;
            }
            
            /* Stack product image and details on mobile */
            .product-info {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .product-image {
                margin-bottom: 10px;
                margin-right: 0;
            }
            
            /* Hide price column on mobile to save space */
            .cart-table th:nth-child(3) {
                display: none;
            }
            
            .cart-table td:nth-child(3) {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Main cart container -->
    <div class="cart-container">
        <!-- Cart header with title -->
        <div class="cart-header">
            <h2>Your Shopping Cart</h2>
        </div>
        
        <!-- Cart content area -->
        <div class="cart-content">
            <!-- Empty cart message (hidden by default, shown via JS when cart is empty) -->
            <div class="empty-cart" id="emptyCart">
                <div class="empty-cart-icon">ðŸ›’</div>
                <p>Your cart is empty</p>
                <button class="continue-shopping">Continue Shopping</button>
            </div>
            
            <!-- Cart with items (shown by default, hidden via JS when cart is empty) -->
            <div class="cart-with-items" id="cartWithItems">
                <!-- Cart items table -->
                <table class="cart-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th></th> <!-- Empty header for remove button column -->
                        </tr>
                    </thead>
                    <tbody id="cartItems">
                        <!-- Cart items will be inserted here by JavaScript -->
                    </tbody>
                </table>
                
                <!-- Cart summary section -->
                <div class="cart-summary">
                    <!-- Subtotal row -->
                    <div class="summary-row">
                        <span class="summary-label">Subtotal</span>
                        <span class="summary-value" id="subtotal">$0.00</span>
                    </div>
                    <!-- Shipping row -->
                    <div class="summary-row">
                        <span class="summary-label">Shipping</span>
                        <span class="summary-value">Free</span>
                    </div>
                    <!-- Total row -->
                    <div class="summary-total">
                        <span class="total-label">Total</span>
                        <span class="total-value" id="total">$0.00</span>
                    </div>
                </div>
                
                <!-- Checkout button container -->
                <div class="checkout-btn-container">
                    <button class="checkout-btn" id="checkoutBtn">Proceed to Checkout</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ======= SHOPPING CART JAVASCRIPT =======

        // Sample cart data (in a real app, this would come from localStorage or a server)
        // Each item has: id, name, price, quantity, and image URL
        let cartItems = [
            {
                id: 1,
                name: 'Premium Headphones',
                price: 129.99,
                quantity: 1,
                image: 'https://via.placeholder.com/80'
            },
            {
                id: 2,
                name: 'Wireless Keyboard',
                price: 79.99,
                quantity: 2,
                image: 'https://via.placeholder.com/80'
            },
            {
                id: 3,
                name: 'Smart Watch',
                price: 199.99,
                quantity: 1,
                image: 'https://via.placeholder.com/80'
            }
        ];

        // ======= DOM ELEMENT REFERENCES =======
        
        // Get references to DOM elements we'll need to update
        const cartItemsElement = document.getElementById('cartItems');          // Table body for cart items
        const subtotalElement = document.getElementById('subtotal');            // Subtotal display element
        const totalElement = document.getElementById('total');                  // Total display element
        const emptyCartElement = document.getElementById('emptyCart');          // Empty cart message container
        const cartWithItemsElement = document.getElementById('cartWithItems');  // Cart with items container
        const checkoutBtn = document.getElementById('checkoutBtn');             // Checkout button

        // ======= UTILITY FUNCTIONS =======
        
        /**
         * Formats a number as a currency string with $ symbol and 2 decimal places
         * @param {number} amount - The amount to format
         * @return {string} Formatted currency string
         */
        function formatCurrency(amount) {
            return '$' + amount.toFixed(2);
        }

        /**
         * Calculates the total price for a single item based on quantity
         * @param {number} price - The unit price
         * @param {number} quantity - The quantity
         * @return {number} Total price for this item
         */
        function calculateItemTotal(price, quantity) {
            return price * quantity;
        }

        /**
         * Calculates the total price for all items in the cart
         * @return {number} The cart total
         */
        function calculateCartTotal() {
            return cartItems.reduce((total, item) => 
                total + calculateItemTotal(item.price, item.quantity), 0
            );
        }

        // ======= CART DISPLAY FUNCTIONS =======
        
        /**
         * Updates the cart display based on current cartItems array
         * Shows empty cart message or populates the table with items
         */
        function updateCartDisplay() {
            // Check if cart is empty
            if (cartItems.length === 0) {
                // Show empty cart message and hide the cart table
                emptyCartElement.style.display = 'block';
                cartWithItemsElement.style.display = 'none';
                return;
            }

            // If we have items, show the cart table and hide empty message
            emptyCartElement.style.display = 'none';
            cartWithItemsElement.style.display = 'block';

            // Clear current cart items from the table
            cartItemsElement.innerHTML = '';

            // Loop through each item and add it to the table
            cartItems.forEach(item => {
                // Create a new table row
                const row = document.createElement('tr');
                // Calculate total for this item
                const itemTotal = calculateItemTotal(item.price, item.quantity);

                // Populate the row with item details
                row.innerHTML = `
                    <td>
                        <div class="product-info">
                            <img src="${item.image}" alt="${item.name}" class="product-image">
                            <div class="product-details">
                                <h3>${item.name}</h3>
                                <span class="product-id">ID: ${item.id}</span>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="quantity-controls">
                            <button class="quantity-btn minus" data-id="${item.id}">-</button>
                            <div class="quantity-value">${item.quantity}</div>
                            <button class="quantity-btn plus" data-id="${item.id}">+</button>
                        </div>
                    </td>
                    <td class="item-price">${formatCurrency(item.price)}</td>
                    <td class="item-total">${formatCurrency(itemTotal)}</td>
                    <td>
                        <button class="remove-btn" data-id="${item.id}">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                            </svg>
                        </button>
                    </td>
                `;

                // Add the row to the table
                cartItemsElement.appendChild(row);
            });

            // Calculate and update the cart total
            const cartTotal = calculateCartTotal();
            subtotalElement.textContent = formatCurrency(cartTotal);
            totalElement.textContent = formatCurrency(cartTotal);
        }

        // ======= CART MODIFICATION FUNCTIONS =======
        
        /**
         * Updates the quantity of an item in the cart
         * @param {number} id - The ID of the item to update
         * @param {number} change - The amount to change the quantity by (can be negative)
         */
        function updateQuantity(id, change) {
            // Map through the cart items and update the one that matches the ID
            cartItems = cartItems.map(item => {
                if (item.id === id) {
                    // Calculate new quantity
                    const newQuantity = item.quantity + change;
                    // Return updated item with new quantity (minimum 1)
                    return {
                        ...item,
                        quantity: newQuantity > 0 ? newQuantity : 1
                    };
                }
                // Return other items unchanged
                return item;
            });

            // Update the display to reflect changes
            updateCartDisplay();
        }

        /**
         * Removes an item from the cart
         * @param {number} id - The ID of the item to remove
         */
        function removeItem(id) {
            // Filter out the item with the matching ID
            cartItems = cartItems.filter(item => item.id !== id);
            // Update the display to reflect changes
            updateCartDisplay();
        }

        // ======= EVENT LISTENERS =======
        
        /**
         * Event delegation for cart interactions
         * Handles clicks on quantity buttons and remove buttons
         */
        document.addEventListener('click', function(event) {
            // Handle quantity decrease button
            if (event.target.classList.contains('minus')) {
                const id = parseInt(event.target.dataset.id);
                updateQuantity(id, -1);
            }
            
            // Handle quantity increase button
            if (event.target.classList.contains('plus')) {
                const id = parseInt(event.target.dataset.id);
                updateQuantity(id, 1);
            }
            
            // Handle remove button (including when SVG or path elements are clicked)
            if (event.target.closest('.remove-btn')) {
                const button = event.target.closest('.remove-btn');
                const id = parseInt(button.dataset.id);
                removeItem(id);
            }
        });

        /**
         * Checkout button event listener
         * Would normally navigate to checkout page
         */
        checkoutBtn.addEventListener('click', function() {
            // In a real app, this would navigate to the checkout page
            alert('Navigating to checkout page...');
            console.log('Proceeding to checkout with items:', cartItems);
            
            // Example of navigation code (commented out):
            // window.location.href = '/checkout.html';
        });

        // ======= INITIALIZATION =======
        
        // Initialize the cart display when the page loads
        updateCartDisplay();
    </script>
</body>
</html>